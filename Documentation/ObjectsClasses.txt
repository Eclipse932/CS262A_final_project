TODO
Figure out how things initialize

ClientApp - L 
1.	Fields
	a.	String RMIRegistryAddress
	b.	Responder entryPoint
	c.	Log InterfaceLog
2.	Methods
3.	Comments
	a.	Client writes the transaction request and the status at the end (ie abort or commit) to the interface log

Log -L
1.	Fields
	a.	List<String> commands
2.	Methods
	a.	Boolean append( String action)

RMI Registry

TransactionIDNamer - L 
1.	Fields
	a.	Static TransactionIDNamer
	b.	Static Integer lastGUID()
2.	Methods
	a.	Integer createNewGUID()
3.	Comments
	a.	Singleton for entire system
	b.	Used by Responder to get a transactionID for each transaction


Responder -M
1.	Fields
	a.	String RMIRegistryAddress
	b.	Private Threadpool Transactions
	c.	Private Threadpool TransactionHearts
	d.	Set<Replica> Leaders ---shared with Transaction and TransactionHeart
2.	Methods
	a.	Private Boolean startNewTransaction( List<String> Actions, Integer transactionID )
	i.	This is the method that starts new Transaction threads
	b.	String PRWTransaction( List<String> Actions)
	c.	String BRWTransaction( List<String> Actions)
	d.	TODO support Read only transactions
3.	Comments
	a.	The two threadpools must be the same size

ListOfStringsAsTheArgumentToPRWTransaction
	This is a miniature language - not a class. Values within a string are delimited by spaces.

	declare <variable name> <integer constant initial value>
	read <variable name> <memory address to be read from>
	write <variable name> <memory address to be written to>
	add <variable name sum> <variable name addend> <variable name addend>
	addc <variable name sum> <variable name> <integer constant addend>


Transaction -M 
1.	Fields
	a.	Final Integer (transactionID) ----structure shared with TransactionHeart
	b.	TransactionHeart myHeart
	c.	List<Locks> myLocks ----- structure shared with the heart
	d.	Boolean alive ----- shared with heart
	e.	Set<Replica> Leaders --- shared with responder and TransactionHeart
2.	Methods
	a.	Private startHeart(List<Locks> myLocks, transactionID)
3.	Comments
	a.	transactionID is a big integer

TransactionHeart -M
1.	Fields
	a.	String RMIRegistryAddress
	b.	List<Locks> myLocks ----- structure shared with the heart
	c.	Boolean alive ----- shared with heart
	d.	Set<Replica> Leaders --- shared with responder and Transaction
2.	Methods
3.	Comments
	a.	If a transaction misses the fact it’s been killed this isn’t a problem with correctness. It just might do unnecessary work.
	b.	Makes RMI to Replica – calls keepTransactionAlive

Replica J
1.	Fields
	a.	String RMIRegistryAddress
	b.	Boolean isLeader
	a.	Log DataLog --- shared with WriteWorker, ReadWorker, and Replica
	c.	Set<Replica> Leaders
	d.	ThreadPool WriteWorkers
	e.	ThreadPool ReadWorkers
	f.	ThreadPool LockWorkers
	g.	ThreadPool LeaseDoctors
	h.	Thread LeaseKiller
	i.	LockTable myLockTable ---- shared with LeaseKiller, LockWorker, and leaseDoctor 
2.	Methods
	a.	Boolean keepTransactionAlive(List<Locks> locks)
	b.	getReplicaLocks( List<Locks>, Integer transactionID) --- if we find a dependency we initiate wound wait in this method
	c.	RWTread( List<String> Keys)
	d.	RWTcommit(Time commitTimestamp, Integer transactionID, List<String> actions)
	e.	Private killTransaction(Integer transactionID)
	f.	Private startWriteWorker(List<String> Actions)
	g.	Private startReadWorker(List<String> Actions)
3.	Comment
	a.	KeeptransactionAlive only extends an existing lease on a lock. It will not make a new one.
	b.	We only need a single LeaseKiller for the entire lock table

LeaseDoctor J
1.	Fields
	a.	LockTable myLockTable ---- shared with LeaseKiller, LockWorker, and leaseDoctor 
2.	Methods
3.	Comments
	a.	Calls extendLease in locktable

Lock J
4.	Fields
	a.	Integer Key range
	b.	Enum Mode
	c.	Time Expiration
	d.	Integer Owner
	e.  Time transactionBirthdate
5.	Methods
6.	Comments
	a.	Owner is a transactionID

LeaseKiller J
1.	Fields
	a.	Heap<Locks> expiringHeap
	b.	List<Locks> committingWrites --- shared with the WriteWorker
	c.	LockTable myLockTable ---- shared with LeaseKiller, LockWorker, and leaseDoctor 
2.	Methods
3.	Comment
	a.	Responsible for checking to see if leases have expired before of timeout. Will remove lock from lock structure
	b.	The expiringHeap needs to have at least the locks in the Locktable. But it can have more and it just ignores extras when it tries to remove them.
	c.	If something is committing we add it to committingWrites so it isn’t removed from the Lock Table

LockTable J
1.	Fields
	c.	TreeMap<Integer, List<Lock>> lockMap ---- shared with LeaseKiller, LockWorker
	a.	Map<TransactionID, startTime> birthdates
	b.	TreeMap<Integer, Heap<LockandCondition>> waitingLocks
2.	Methods
	a.	Synchronized getTableLocks(List<Locks>, Integer transactionID)
	b.	Synchronized releaseTableLocks(List<Locks>, Integer transactionID)
	c.	Synchronized extendLease(List<Locks> Locks)
3.	Comments
	a.	Wound wait is addressed inside the call to getTableLocks: if a lock is already held, check the dependencies and potentially kill a younger process.
	b.	In the implementation of getTableLocks use monitors and make a condition variable for every lock that is currently held. Add to “dependencies”. 
	c.	releaseTableLocks needs to perform a check on the waiting locks to see which can acquire a lock.
	d.	Make sure we don’t allow reads to continuously block writes 
	i.	Possible solution: give writes priorty over reads


LockWorker J
1.	Fields
	a.	TreeMap<Integer, List<Lock>> lockMap ---- shared with LeaseKiller, LockWorker
	b.	
2.	Methods
3.	Comment
	a.	Responsible for serving the calls to getLocks from the receiver and calling getTableLocks from the LockTable

LockandCondition -J
1.	Field
	a.   Lock l
	b.   Condition c
2.	Methods


TrueTime -L
1.	Fields
	a.	Double clockError
2.	Methods
	a.	Static TimeInterval Now()
	b.	Static Boolean Before(TimeInterval t)
	c.	Static Boolean After(TimeInterval t)

TimeInterval -L
1.	Fields
	a.	Time Earliest
	b.	Time latest

WriteWorker -M
2.	Field
	a.	List<String> Actions
	b.	Log  dataLog --- shared with WriteWorker, ReadWorker, and Replica
3.	Methods

ReadWorker -M
1.	Field
	a.	List<String> Actions
	b.	Log  dataLog --- shared with WriteWorker, ReadWorker, and Replica
	c.	

PaxosKVstore -M
1.	Field
2.	Methods
	a.	replicatedPut(Integer key, Time timestamp, integer data)


-------------------------
Psuedocode for Locks
-------------------------

x is the lock.

Synchronized GetReplicaLock(x)
	javaLock = new javaLock()
	replicaCondition = lock.newCondition()
	LockandCondition lc = new LockandCondition(x, replicaCondition)
	Add lc to appropriate heap
	priorityQueueManagerConditionVariable.signal()
	replicaCondition.await()
	

Thread rungetTableLock = new Thread(lc)

lc is a lock and condition

Synchronized runforqueuemanager(){
	while (true)
		WakeNextLock(heap)
		thisconditionvariable.await()
}


Synchronized GetTableLock(LockandCondition lc)
	WakeNextLock(heap)
	return

Synchronized RemoveLock(x)
	Remove lock from lock table
	WakeNextLock(heap)

Synchronized WakeNextLock(heap)
	y = LockandCondition at top of heap
If( lock table.rangefory == empty )
	Remove y from heap
	Put y.l in lock table
	y.c.signal()
	WakeNextLock(heap)
If( y == read lock and all locks in lock table are read locks)
	Remove y from heap
	Put y.l in lock table
	y.c.signal()
	WakeNextLock(heap)
If( y == read lock and table has write lock z)
	If( y older than z)
		Kill z
		Remove y from heap
	Put y in lock table
		WakeNextLock(heap)
	If( z older than y)
		Return
If( y == write lock and table has any mode lock z)
	If( y older than z)
		Kill z
		Remove y from heap
	Put y in lock table
		return
