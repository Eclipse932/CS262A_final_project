TODO
Figure out how things initialize

ClientApp - L 
1.	Fields
	a.	String RMIRegistryAddress
	b.	Responder entryPoint
	c.	Log InterfaceLog
2.	Methods
3.	Comments
	a.	Client writes the transaction request and the status at the end (ie abort or commit) to the interface log

Log -L
1.	Fields
	a.	List<String> commands
2.	Methods
	a.	Boolean append( String action)

RMI Registry

TransactionIDNamer - L 
1.	Fields
	a.	Static TransactionIDNamer
	b.	Static Integer lastGUID() --- "the transactionID should ideally be a long" comment by Jane
2.	Methods
	a.	Integer createNewGUID()
3.	Comments
	a.	Singleton for entire system
	b.	Used by Responder to get a transactionID for each transaction


Responder -M
1.	Fields
	a.	String RMIRegistryAddress
	b.	Private Threadpool Transactions
	c.	Private Threadpool TransactionHearts
	d.	Set<Replica> Leaders ---shared with Transaction and TransactionHeart
2.	Methods
	a.	Private Boolean startNewTransaction( List<String> Actions, Integer transactionID )
	i.	This is the method that starts new Transaction threads
	b.	String PRWTransaction( List<String> Actions)
	c.	String BRWTransaction( List<String> Actions)
	d.	TODO support Read only transactions
3.	Comments
	a.	The two threadpools must be the same size

ListOfStringsAsTheArgumentToPRWTransaction
	This is a miniature language - not a class. Values within a string are delimited by spaces.

	declare <variable name> <integer constant initial value>
	read <variable name> <memory address to be read from>
	write <variable name> <memory address to be written to>
	add <variable name sum> <variable name addend> <variable name addend>
	addc <variable name sum> <variable name> <integer constant addend>
	wait <integer time to sleep in milliseconds>


Transaction -M 
1.	Fields
	a.	Final Integer (transactionID) ----structure shared with TransactionHeart
	b.	TransactionHeart myHeart
	c.	List<Locks> myLocks ----- structure shared with the heart
	d.	Boolean alive ----- shared with heart
	e.	Set<Replica> Leaders --- shared with responder and TransactionHeart
2.	Methods
	a.	Private startHeart(List<Locks> myLocks, transactionID)
3.	Comments
	a.	transactionID is a big integer

TransactionHeart -M
1.	Fields
	a.	String RMIRegistryAddress
	b.	List<LeaseLock> myLocks ----- structure shared with Transaction
	c.	Boolean alive ----- shared with Transaction
	d.	Replica leader --- shared with responder and Transaction
2.	Methods
3.	Comments
	a.	If a transaction misses the fact it’s been killed this isn’t a problem with correctness. It just might do unnecessary work.
	b.	Makes RMI to Replica – calls keepTransactionAlive

Replica J
1.	Fields
	a.	String RMIRegistryAddress
	b.	Boolean isLeader
	c.  String name;
	==================================================The above fields are configured when a new replica is started up==============================
	a.	Log DataLog --- shared with WriteWorker, ReadWorker, and Replica
	c.	Replica Leader --- we need a way to find the leader replica
	========== the leader also needs to know all non-leader replicas ===============
	
	h.	Thread LeaseKiller
	i.	List<Locks> committingWrites --- shared with the WriteWorkers and LeaseKiller
	j.	LockTable myLockTable ---- shared with LeaseKiller, LockWorker, and leaseDoctor 
	
	static field
	Duration leaseLockInterval = 10 milliseconds
2.	Methods
	a.	Instant keepTransactionAlive(List<Locks> locks) -J a null return value means we fail to extend the lock lease
	b.	Instant getReplicaLock(LeaseLock lock) --- if we find a dependency we initiate wound wait in this method -J
	c.	RWTread( List<String> Keys) -M
	d.	RWTcommit(Time commitTimestamp, Integer transactionID, List<String> actions) -M

3.	Comment
	a.	KeeptransactionAlive only extends an existing lease on a lock. It will not make a new one.
	b.	We only need a single LeaseKiller for the entire lock table


Lock J  -- the class is called LeaseLock in the project to avoid with Java Lock class; I choose long to represent Time class
4.	Fields
	a.	Integer Key 
	b.	Enum AccessMode
	c.	Time Expiration 
	d.	Integer Owner ---- I use long to represent transactionID
5.	Methods
6.	Comments
	a.	Owner is a transactionID

LeaseKiller J
1.	Fields
	//a.	Heap<Locks> expiringHeap -- it actually doesn't save any time because we still need to lock the lockMap and possibly the waitingMap, 
	so I decide to just let the leaseKiller go through the lockMap
	b.	List<Locks> committingWrites --- shared with the WriteWorker through Replica commitWrites field
	c.	LockTable myLockTable ---- shared with LeaseKiller, LockWorker, and leaseDoctor 
2.	Methods
3.	Comment
	a.	Responsible for checking to see if leases have expired before of timeout. Will remove lock from lock structure
	b.	The expiringHeap needs to have at least the locks in the Locktable. But it can have more and it just ignores extras when it tries to remove them.
	c.	If something is committing we add it to committingWrites so it isn’t removed from the Lock Table

LockTable J
1.	Fields
	a.	Map<Integer, List<Lock>> lockMap ---- shared with LeaseKiller, LockWorker
	c.	HashMap<TransactionID, startTime> birthdates 
	b.	Map<Integer, Heap<LockandCondition>> waitingLocks
2.	Methods
	b.	Synchronized releaseTableLocks(List<LeaseLock> locks)
	c.	Instant Synchronized extendLease(List<LeaseLock> locks)
3.	Comments
	a.	Wound wait is addressed inside the call to getTableLocks: if a lock is already held, check the dependencies and potentially kill a younger process.
	b.	In the implementation of getTableLocks use monitors and make a condition variable for every lock that is currently held. Add to “dependencies”. 
	c.	releaseTableLocks needs to perform a check on the waiting locks to see which can acquire a lock.
	d.	Make sure we don’t allow reads to continuously block writes 
	i.	Possible solution: give writes priorty over reads


LockWorker J
1.	Fields
	a.	LockTable lockTable ---- shared with LeaseKiller, Replica
2.	Methods
3.	Comment
	a.	Responsible for serving the calls to getLocks from the receiver and calling getTableLocks from the LockTable

LockandCondition implements Comparable-J
1.	Field
	a.   LeaseLock l
	b.   Object o
	c.  Time TransactionBirthdate -- use Long object to represent the time
2.	Methods
3. comments
	a. should support comparing based on transactionBirthdate field


TrueTime -L
1.	Fields
	a.	Double clockError
2.	Methods
	a.	Static TimeInterval Now()
	b.	Static Boolean Before(TimeInterval t)
	c.	Static Boolean After(TimeInterval t)

TimeInterval -L
1.	Fields
	a.	Time Earliest
	b.	Time latest

WriteWorker -M
2.	Field
	a.	List<String> Actions
	b.	Log  dataLog --- shared with WriteWorker, ReadWorker, and Replica
	c.  List<Locks> committingWrites --- shared with the LeaseKiller through Replica commitWrites field
3.	Methods

ReadWorker -M
1.	Field
	a.	List<String> Actions
	b.	Log  dataLog --- shared with WriteWorker, ReadWorker, and Replica

PaxosKVstore -M
1.	Field
2.	Methods
	a.	replicatedPut(Integer key, Time timestamp, integer data)


-------------------------
Psuedocode for Locks
-------------------------
Replica:

RMI blocking method getReplicaLock

getReplicaLock(leaseLock) {
	Object o = new Object();
	synchronized(o) {
		LockandCondition lc = new LockandCondtion(leaseLock, o)
		Thread t = new Thread(new LockWorker(lc, lockTable))
		t.start()
		o.wait()
	}

}

Runnable LockWorker {
	LockandCondition lc;
	LockTable lockTable;

	public void run {
		synchronized(lc.o) {
			sychronized on (lockTable) {
				add lc to the heap
				wakeNextLock(heap)
			}
		}
	}
}

Synchronized RemoveLock(x)
	Remove lock from lock table
	WakeNextLock(heap)

Synchronized WakeNextLock(heap)
	y = LockandCondition at top of heap
If( lock table.rangefory == empty )
	Remove y from heap
	Put y.l in lock table; set the expirationTime in y.l
	synchronized(c) {
		y.o.notify()
	}
	WakeNextLock(heap)
If( y == read lock and all locks in lock table are read locks)
	Remove y from heap
	Put y.l in lock table; set the expirationTime in y.l
	synchronized(c) {
		y.o.notify()
	}
	WakeNextLock(heap)
If( y == read lock and table has write lock z)
	If( y older than z)
		Kill z
		Remove y from heap
		Put y.l in lock table; set the expirationTime in y.l
		synchronized(c) {
			y.o.notify()
		}
		WakeNextLock(heap)
	If( z older than y)
		Return
If( y == write lock and table has write lock z)
	If( y older than z)
		Kill z
		Remove y from heap
		Put y.l in lock table; set the expirationTime in y.l
		synchronized(c) {
			y.o.notify()
		}
		return
 	if (z older than y)
 		return
 if (y == write lock and all locks in lock table are read locks)
 	if y is older than any lock in the lock table
 		kill the transactions which hold the lock
 		remove y from heap
 		put y.l in lock table; set the expirationTime in y.l
 		synchronized(c) {
			y.o.notify()
		}
 		return
 	else 
 		return
 		

How to start a server
 		
Initialization: The RemoteRegistry must be completely empty.

    Start local RMI Server (you do this by calling the constructor on a UnicastRemoteObjec)t
    Bind server instance to remote name given as command line argument to the local rmi registry. That machine's ip address is also given as a command line argument, so this local name looks like "//localIPaddress/localname"
    Acquire remote object for RemoteRegistry. We know where to find it and it's always available on the Terratest server.
    Use the RemoteRegistry to lookup and get network names for entities this server depends on (i.e. Client app depends on a responder, responder depends on the leader) It's crucial that this not be a cycle. If the remote object you need has not already been registered in the RemoteRegistry, wait a few seconds (sleep) and try again. Keep trying until you get the full network name of the remote object you need.
    Use the full network name to get an actual remote object for your dependency (e.g. Responder gets a remote object for the Leader). Use the remote object to finish initializing your server.
    When your Server is completely ready to go, register the network name "//localIPaddress/localname" as "remotename".


Important rules:

    Only register your server in the RemoteRegistry after it is completely ready to start fielding requests. Otherwise a client may find the server and start making requests before your server has been initialized.
 		